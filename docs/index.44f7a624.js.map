{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-f0ac2c005799fdf8.js","src/modules/abstractClass.ts","src/modules/restAPI.ts","src/modules/eventHandler.ts","node_modules/@parcel/runtime-js/lib/runtime-40662870a0b9a83f.js","node_modules/@parcel/runtime-js/lib/runtime-b8127337dac65abb.js","node_modules/@parcel/runtime-js/lib/runtime-e48621c3fa880b48.js","src/modules/guiElements.ts","src/pages/Profile.ts","src/pages/Dashboard.ts","src/pages/LoginPage.ts","src/index.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"l1gf1\\\":\\\"index.44f7a624.js\\\",\\\"juO8e\\\":\\\"BongoCat.4177eac4.png\\\",\\\"cQoTT\\\":\\\"BongoCat1.9a890426.png\\\",\\\"hgdhd\\\":\\\"BongoCat2.1e216f80.png\\\"}\"));","// User-klassen representerar en användare med en unik ID, användarnamn, lösenord, profilbild och en array av poster.\r\nexport class User {\r\n    constructor(\r\n        public readonly userID: string,\r\n        public readonly username: string,\r\n        public readonly password: string,\r\n        public profilePic: string,\r\n        public posts: Post[] = []\r\n        ) {}\r\n    }\r\n    \r\n    // Post-typen representerar en post med ett meddelande och en tidsstämpel.\r\n    export type Post = {\r\n        message: string;\r\n        timestamp: string;\r\n    }\r\n    \r\n    // PostInfo-typen representerar en post med ytterligare information såsom användarnamn och profilbild för den användare som skapade posten.\r\n    export type PostInfo = {\r\n        username: string;\r\n        profilePic: string;\r\n        message: string;\r\n        timestamp: string;\r\n    }\r\n    \r\n    // Koden inkluderar också en funktion för att hämta ID för den inloggade användaren från lokal lagring (local storage).\r\n    export function loginedUser(): string | null  {\r\n    return localStorage.getItem(\"userLoggedIn\")\r\n}","import { User } from \"./abstractClass\"\r\n\r\n// URL för basadressen för Firebase Realtime Database API.\r\nconst baseURL: string = 'https://socialmediaplatform-368e0-default-rtdb.europe-west1.firebasedatabase.app/'\r\n\r\n// Hämtar alla användare från Firebase Realtime Database API och konverterar dem till en array av User-objekt.\r\nexport async function fetchAllUsers(): Promise<User[]> {\r\n    const url: string = `${baseURL}.json`;\r\n\r\n    const reponse = await fetch(url);\r\n    const data = await reponse.json();\r\n\r\n    const users: User[] = []\r\n\r\n    if (data && typeof data === 'object') {\r\n        for (const [key, value] of Object.entries(data)) {\r\n            if (typeof value === 'object') {\r\n                const incomingUser = value as any\r\n                users.push({\r\n                    userID: key,\r\n                    username: incomingUser.username,\r\n                    password: incomingUser.password,\r\n                    posts: incomingUser.posts,\r\n                    profilePic: incomingUser.profilePic\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return users;\r\n}\r\n\r\n// Registrerar en användare i Firebase Realtime Database API och returnerar det nya användar-ID:et.\r\nexport async function registerUser(obj: User): Promise<string> {\r\n    const url = `${baseURL}.json`;\r\n\r\n    const init = {\r\n        method: 'POST',\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n            \"Content-Type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    };\r\n    return await fetch(url, init)\r\n        .then(res => res.json())\r\n        .then(user => user.name)\r\n}\r\n\r\n// Tar bort en användare från Firebase Realtime Database API baserat på användar-ID.\r\nexport async function deleteUser(userID: string): Promise<void> {\r\n    const url = `${baseURL}${userID}.json`;\r\n\r\n    const init = {\r\n        method: 'DELETE',\r\n    };\r\n\r\n    await fetch(url, init);\r\n}\r\n\r\n// Skickar ett nytt statusinlägg till Firebase Realtime Database API för en användare baserat på användar-ID och index för statusinlägget.\r\nexport async function postStatus(obj: {message: string, timestamp: string}, userID: string, postIndex: number): Promise<void> {\r\n    const url = `${baseURL}${userID}/posts/${postIndex}.json`;\r\n\r\n    const init = {\r\n        method: 'PUT',\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n            \"Content-Type\": \"application/json; charset=uUTFtf-8\",\r\n        }\r\n    }\r\n\r\n    await fetch(url, init);\r\n}","import { User } from \"./abstractClass\";\r\n\r\n// Kontrollerar om det givna användarnamnet och lösenordet matchar en användare i listan av användare.\r\nexport function checkLogin(inputUsername: string, inputPassword: string, users: User[]): boolean {\r\n    try {\r\n        const databaseUser = users.find(user => user.username === inputUsername);\r\n        if (databaseUser && databaseUser.password === inputPassword) {\r\n            localStorage.setItem(\"userLoggedIn\", inputUsername);\r\n            return true;\r\n        } else {\r\n            alert(\"wrong password\");\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        alert(\"an error occurred\");\r\n        return false;\r\n    }\r\n}\r\n\r\n// Tar bort den inloggade användaren från lokal lagring (local storage).\r\nexport function logOutEvent(): void {\r\n    localStorage.removeItem(\"userLoggedIn\");\r\n}","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"juO8e\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"cQoTT\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hgdhd\")).toString();","import { fetchAllUsers } from \"./restAPI\";\r\nimport { User, Post, PostInfo } from \"./abstractClass\";\r\n\r\nimport BongoCat1 from \"../images/BongoCat.png\"\r\nimport BongoCat2 from \"../images/BongoCat1.png\"\r\nimport BongoCat3 from \"../images/BongoCat2.png\"\r\n\r\nconst userLoggedIn = localStorage.getItem(\"userLoggedIn\");\r\n\r\nconst profilePicMap: Record<string, string> = {\r\n    pic0: BongoCat1,\r\n    pic1: BongoCat2,\r\n    pic2: BongoCat3,\r\n    default: BongoCat3,\r\n};\r\n\r\n// Generate user info and display on the page\r\nexport async function generateUserInfo(): Promise<void> {\r\n    const div = document.querySelector(\".user-info\") as HTMLDivElement;\r\n\r\n    // Fetch all users and loop through each user to find the logged-in user\r\n    const users: User[] = await fetchAllUsers();\r\n    users.forEach((user) => {\r\n        if (user && user.username === userLoggedIn) {\r\n            // Create and append a paragraph element to display the username\r\n            const usernameText: HTMLParagraphElement = document.createElement(\"p\");\r\n            const userProfilePic: HTMLImageElement = document.createElement(\"img\");\r\n            let imgURL: URL;\r\n\r\n            div.append(usernameText, userProfilePic);\r\n            usernameText.innerText = user.username;\r\n\r\n            // Create and append an image element to display the user's profile picture\r\n            const profilePicURL = profilePicMap[user.profilePic] || profilePicMap.default;\r\n            imgURL = new URL(profilePicURL, import.meta.url);\r\n            userProfilePic.src = imgURL.href;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Creates a post element for the given post and appends it to the provided element.\r\n * @param post - The post to create an element for.\r\n * @param fetchedData - The user or post info associated with the post.\r\n * @param appendTo - The element to append the post element to.\r\n */\r\nexport function generatePostGUI(post: Post, fetchedData: User | PostInfo, appendTo: Element): void {\r\n    const postElement = document.createElement(\"div\");\r\n    postElement.classList.add(\"post\");\r\n\r\n    const userNameAndPic = document.createElement(\"div\");\r\n    userNameAndPic.classList.add(\"userNameAndPic\");\r\n\r\n    const userProfilePicElement = document.createElement(\"img\");\r\n    userProfilePicElement.classList.add(\"profilePic\");\r\n\r\n    const usernameElement = document.createElement(\"div\");\r\n    usernameElement.classList.add(\"username\");\r\n    usernameElement.innerText = fetchedData.username;\r\n\r\n    const messageElement = document.createElement(\"div\");\r\n    messageElement.classList.add(\"message\");\r\n    messageElement.innerText = post.message;\r\n\r\n    const timestampElement = document.createElement(\"div\");\r\n    timestampElement.classList.add(\"timestamp\");\r\n    const date = new Date(post.timestamp);\r\n    timestampElement.innerText = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\r\n\r\n    const profilePic = fetchedData.profilePic;\r\n\r\n    userProfilePicElement.src = profilePicMap[profilePic]\r\n    userNameAndPic.append(userProfilePicElement, usernameElement);\r\n    postElement.append(userNameAndPic, messageElement, timestampElement);\r\n\r\n    appendTo.append(postElement);\r\n}\r\n\r\n/**\r\nFetches all users and generates the user card for the desired user.\r\n@param {string} desiredUser - The username of the desired user to generate the card for.\r\n@returns {Promise<void>} Promise that resolves when the user card is generated.\r\n*/\r\nexport async function generateDesiredUser(desiredUser: string): Promise<void> {\r\n    const userCard = document.querySelector(\".user-card\") as HTMLDivElement;\r\n    const usernameH3 = document.querySelector(\".user-card h3\") as HTMLHeadingElement;\r\n    usernameH3.innerText = desiredUser;\r\n\r\n    const users: User[] = await fetchAllUsers();\r\n    users.forEach((user) => {\r\n        if (user && user.username === desiredUser) {\r\n            const userProfilePic: HTMLImageElement = document.createElement(\"img\");\r\n            let imgUrl: string \r\n\r\n            userCard.append(userProfilePic);\r\n            if (user.profilePic in profilePicMap) {\r\n                imgUrl = profilePicMap[user.profilePic]\r\n            } else {\r\n                imgUrl = profilePicMap[\"default\"]\r\n            }\r\n            userProfilePic.src = imgUrl;\r\n        }\r\n    });\r\n}\r\n","import { User, loginedUser } from \"../modules/abstractClass\";\r\nimport { logOutEvent } from \"../modules/eventHandler\";\r\nimport { IPage, TPageSwitcher } from \"./IPage\";\r\nimport { generatePostGUI } from \"../modules/guiElements\";\r\nimport { postStatus, fetchAllUsers, deleteUser } from \"../modules/restAPI\";\r\n\r\n//Kolla LoginPage.ts för varför jag har gjort på detta sättet\r\nexport class ProfilePage implements IPage {\r\n    private sectionHeader: HTMLElement;\r\n    private sectionProfile: HTMLElement;\r\n\r\n    constructor(\r\n        private app: Element,\r\n        private setPage: TPageSwitcher,\r\n        private user: User,\r\n        private isYourProfile: boolean\r\n    ) {\r\n        this.sectionHeader = this.renderHeader();\r\n        this.sectionProfile = this.renderProfile();\r\n    }\r\n\r\n    render(): void {\r\n        this.app.replaceChildren();\r\n        document.title = this.user.username;\r\n        this.app.append(this.sectionHeader, this.sectionProfile);\r\n        this.syncPosts();\r\n    }\r\n\r\n    private onDashboard(): void {\r\n        this.setPage('dashboard');\r\n    }\r\n\r\n    private onLogout(): void {\r\n        logOutEvent();\r\n        this.setPage('login');\r\n    }\r\n\r\n    private onDelete(): void {\r\n        logOutEvent();\r\n        this.setPage('login');\r\n    }\r\n\r\n    private renderHeader(): HTMLElement {\r\n        const sectionHeader = document.createElement(\"section\");\r\n        sectionHeader.classList.add(\"header\");\r\n\r\n        const h1Element = document.createElement(\"h1\");\r\n        if(!this.isYourProfile){\r\n            h1Element.textContent = `${this.user.username}'s profile`;\r\n        }\r\n        else {\r\n        h1Element.textContent = \"Your profile\";\r\n        }\r\n        sectionHeader.appendChild(h1Element);\r\n\r\n        const divNavInfo = document.createElement(\"div\");\r\n        divNavInfo.classList.add(\"nav-info\");\r\n\r\n        const buttonDashboard = document.createElement(\"button\");\r\n        buttonDashboard.classList.add(\"dashboard-btn\");\r\n        buttonDashboard.textContent = \"Home\";\r\n        buttonDashboard.addEventListener('click', () => this.onDashboard());\r\n        divNavInfo.appendChild(buttonDashboard);\r\n\r\n        const buttonLogOut = document.createElement(\"button\");\r\n        buttonLogOut.classList.add(\"log-out-btn\");\r\n        buttonLogOut.textContent = \"Log out\";\r\n        buttonLogOut.addEventListener(\"click\", () => this.onLogout());\r\n        divNavInfo.appendChild(buttonLogOut);\r\n\r\n        if (this.isYourProfile) {\r\n            // create button element with id \"delete-account\" and add it to divNavInfo\r\n            const buttonDeleteAccount = document.createElement(\"button\");\r\n            buttonDeleteAccount.setAttribute(\"id\", \"delete-account\");\r\n            buttonDeleteAccount.textContent = \"Delete my account\";\r\n            divNavInfo.appendChild(buttonDeleteAccount);\r\n\r\n            // create div element with id \"confirm-delete-popup\" and class \"popup\"\r\n            const divConfirmDeletePopup = document.createElement(\"div\");\r\n            divConfirmDeletePopup.setAttribute(\"id\", \"confirm-delete-popup\");\r\n            divConfirmDeletePopup.classList.add(\"popup\");\r\n\r\n            // create div element with class \"popup-content\" and add it to divConfirmDeletePopup\r\n            const divPopupContent = document.createElement(\"div\");\r\n            divPopupContent.classList.add(\"popup-content\");\r\n            divConfirmDeletePopup.appendChild(divPopupContent);\r\n\r\n            // create p element with text content and add it to divPopupContent\r\n            const pDeleteConfirmation = document.createElement(\"p\");\r\n            pDeleteConfirmation.textContent = \"Are you sure you want to delete? This change is permanent\";\r\n            divPopupContent.appendChild(pDeleteConfirmation);\r\n\r\n            // create div element with class \"popup-buttons\" and add it to divPopupContent\r\n            const divPopupButtons = document.createElement(\"div\");\r\n            divPopupButtons.classList.add(\"popup-buttons\");\r\n            divPopupContent.appendChild(divPopupButtons);\r\n\r\n            // create button element with id \"confirm-delete\" and add it to divPopupButtons\r\n            const buttonConfirmDelete = document.createElement(\"button\");\r\n            buttonConfirmDelete.setAttribute(\"id\", \"confirm-delete\");\r\n            buttonConfirmDelete.textContent = \"Confirm\";\r\n            buttonConfirmDelete.addEventListener('click', () => this.deleteMyProfile())\r\n            divPopupButtons.appendChild(buttonConfirmDelete);\r\n\r\n            // create button element with id \"cancel-delete\" and add it to divPopupButtons\r\n            const buttonCancelDelete = document.createElement(\"button\");\r\n            buttonCancelDelete.setAttribute(\"id\", \"cancel-delete\");\r\n            buttonCancelDelete.textContent = \"Cancel\";\r\n            divPopupButtons.appendChild(buttonCancelDelete);\r\n\r\n            // add divConfirmDeletePopup to divNavInfo\r\n            divNavInfo.appendChild(divConfirmDeletePopup);\r\n        }\r\n\r\n        const divUserInfo = document.createElement(\"div\");\r\n        divUserInfo.classList.add(\"user-info\");\r\n        divNavInfo.appendChild(divUserInfo);\r\n\r\n        sectionHeader.appendChild(divNavInfo);\r\n\r\n        return sectionHeader;\r\n\r\n    }\r\n    private renderProfile(): HTMLElement {\r\n        const sectionProfileContainer = document.createElement(\"section\");\r\n        sectionProfileContainer.classList.add(\"profile-container\");\r\n\r\n        const divProfilePosts = document.createElement(\"div\");\r\n        divProfilePosts.classList.add(\"profile-posts\");\r\n\r\n        if (this.isYourProfile) {\r\n            const formNewPost = document.createElement(\"form\");\r\n            formNewPost.setAttribute(\"id\", \"newPostForm\");\r\n            divProfilePosts.appendChild(formNewPost);\r\n            \r\n            const inputNewPost = document.createElement(\"input\");\r\n            inputNewPost.setAttribute(\"type\", \"text\");\r\n            inputNewPost.setAttribute(\"placeholder\", \"Post positive message\");\r\n            inputNewPost.setAttribute(\"id\", \"new-post\");\r\n            formNewPost.appendChild(inputNewPost);\r\n\r\n            const buttonPublish = document.createElement(\"button\");\r\n            buttonPublish.textContent = \"Publish\";\r\n            formNewPost.appendChild(buttonPublish);\r\n\r\n            formNewPost.addEventListener(\"submit\", e => {\r\n                e.preventDefault()\r\n                this.publishPost();\r\n            })\r\n        }\r\n\r\n        const divMyPosts = document.createElement(\"div\");\r\n        divMyPosts.setAttribute(\"id\", \"my-posts\");\r\n        divProfilePosts.appendChild(divMyPosts);\r\n\r\n        sectionProfileContainer.appendChild(divProfilePosts);\r\n\r\n        const divUserCard = document.createElement(\"div\");\r\n        divUserCard.classList.add(\"user-card\");\r\n        sectionProfileContainer.appendChild(divUserCard);\r\n\r\n        const h3UserCard = document.createElement(\"h3\");\r\n        divUserCard.appendChild(h3UserCard);\r\n\r\n        return sectionProfileContainer;\r\n\r\n    }\r\n\r\n    private async syncPosts() {\r\n        const myPosts = document.querySelector('#my-posts') as HTMLDivElement;\r\n        const users: User[] = await fetchAllUsers();\r\n        const username = this.user.username\r\n        const user = users.find(user => user.username === username)!;\r\n        this.user = user;\r\n        myPosts.replaceChildren();\r\n        this.user.posts.reverse().forEach(post => {\r\n            generatePostGUI(post, this.user, myPosts);\r\n        })\r\n    }\r\n\r\n    private async publishPost() {\r\n        const newPost: string = (document.querySelector('#new-post') as HTMLInputElement).value;\r\n\r\n        const postObject = {\r\n            message: newPost,\r\n            timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        const users: User[] = await fetchAllUsers();\r\n        users.forEach((user) => {\r\n            if (user && user.username === this.user.username) {\r\n                const postIndex = user.posts.length;\r\n                postStatus(postObject, user.userID, postIndex).then(() => this.syncPosts());\r\n            }\r\n        });\r\n    }\r\n\r\n    private async deleteMyProfile (){\r\n        const users: User[] = await fetchAllUsers();\r\n        const username = loginedUser()!;\r\n        users.forEach((user) => {\r\n        if (user && user.username === username) {\r\n            deleteUser(user.userID).then(() => this.onDelete());\r\n        }\r\n    })\r\n    }\r\n\r\n}","import { IPage, TPageSwitcher } from \"./IPage\";\r\nimport { PostInfo, User, loginedUser } from \"../modules/abstractClass\";\r\nimport { fetchAllUsers} from \"../modules/restAPI\";\r\nimport { logOutEvent } from \"../modules/eventHandler\";\r\nimport { generatePostGUI } from \"../modules/guiElements\";\r\nimport { ProfilePage } from \"./Profile\";\r\n\r\n//Kolla LoginPage.ts för varför jag har gjort på detta sättet\r\nexport class DashboardPage implements IPage {\r\n    private sectionHeader: HTMLElement;\r\n    private sectionFeed: HTMLElement;\r\n\r\n    constructor(private app: Element, private setPage: TPageSwitcher) {\r\n        this.sectionHeader = this.renderHeader();\r\n        this.sectionFeed = this.renderFeed();\r\n    }\r\n\r\n    render(): void {\r\n        this.app.replaceChildren();\r\n        document.title = \"Dashboard Page\";\r\n        this.app.append(this.sectionHeader, this.sectionFeed)\r\n        this.syncFeed()\r\n        this.syncAllUsers()\r\n    }\r\n\r\n    private async onOpenMyProfile() {\r\n        // Fetches all users and retrieves the current logged in user's username\r\n        const users: User[] = await fetchAllUsers();\r\n        // If no user is logged in, redirects to the login page\r\n        const username = loginedUser()\r\n        if (!username) {\r\n            this.setPage(\"login\")\r\n            return\r\n        }\r\n        // Finds the user object that matches the logged in user's username\r\n        const user = users.find(user => user.username === username)\r\n        if (!user) {\r\n            this.setPage(\"login\")\r\n            return\r\n        }\r\n        // Redirects to the profile page for the logged in user\r\n        this.setPage(new ProfilePage(this.app, this.setPage, user, true))\r\n    }\r\n\r\n    private onLogout(): void {\r\n        // Logs out the current user and redirects to the login page\r\n        logOutEvent();\r\n        this.setPage('login');\r\n    }\r\n\r\n    private renderHeader(): HTMLElement {\r\n        const sectionHeader = document.createElement(\"section\");\r\n        sectionHeader.classList.add(\"header\");\r\n\r\n        const h1Element = document.createElement(\"h1\");\r\n        h1Element.textContent = \"Your feed\";\r\n        sectionHeader.appendChild(h1Element);\r\n\r\n        const sectionNavInfo = document.createElement(\"section\");\r\n        sectionNavInfo.classList.add(\"nav-info\");\r\n\r\n        const buttonProfile = document.createElement(\"button\");\r\n        buttonProfile.classList.add(\"profile-btn\");\r\n        buttonProfile.textContent = \"My profile\";\r\n        buttonProfile.addEventListener(\"click\", () => this.onOpenMyProfile());\r\n        sectionNavInfo.appendChild(buttonProfile);\r\n\r\n        const buttonLogOut = document.createElement(\"button\");\r\n        buttonLogOut.classList.add(\"log-out-btn\");\r\n        buttonLogOut.textContent = \"Log out\";\r\n        buttonLogOut.addEventListener(\"click\", () => this.onLogout());\r\n        sectionNavInfo.appendChild(buttonLogOut);\r\n\r\n        const sectionUserInfo = document.createElement(\"section\");\r\n        sectionUserInfo.classList.add(\"user-info\");\r\n        sectionNavInfo.appendChild(sectionUserInfo);\r\n\r\n        sectionHeader.appendChild(sectionNavInfo);\r\n\r\n        return sectionHeader;\r\n    }\r\n\r\n    private renderFeed(): HTMLElement {\r\n        const sectionFeedContainer = document.createElement(\"section\");\r\n        sectionFeedContainer.classList.add(\"feed-container\");\r\n\r\n        const sectionFeed = document.createElement(\"section\");\r\n        sectionFeed.classList.add(\"feed\");\r\n        sectionFeed.id = 'feed-list';\r\n        sectionFeedContainer.appendChild(sectionFeed);\r\n\r\n        const sectionAllUsers = document.createElement(\"section\");\r\n        sectionAllUsers.classList.add(\"user-container\");\r\n\r\n        const h3AllUsers = document.createElement(\"h3\");\r\n        h3AllUsers.textContent = \"All user(s):\";\r\n        sectionAllUsers.appendChild(h3AllUsers);\r\n\r\n        const userList = document.createElement(\"div\")\r\n        userList.id = \"all-users\";\r\n        sectionAllUsers.appendChild(userList);\r\n\r\n        sectionFeedContainer.appendChild(sectionAllUsers);\r\n\r\n        return sectionFeedContainer;\r\n    }\r\n\r\n    private async syncAllUsers() {\r\n        const allUsersDiv = document.querySelector(\"#all-users\");\r\n        if (!allUsersDiv) return;\r\n        allUsersDiv.replaceChildren()\r\n\r\n        const users: User[] = await fetchAllUsers();\r\n        // Create an element for each user and add it to the container\r\n        users.forEach((user) => {\r\n            if (user) {\r\n                const item = document.createElement(\"div\");\r\n                const a = document.createElement(\"a\");\r\n                \r\n                // Set the username as the link text\r\n                a.innerHTML = user.username\r\n\r\n                // Add an event listener to the link that opens the user's profile page when clicked\r\n                a.addEventListener(\"click\",\r\n                    () => this.setPage(\r\n                            new ProfilePage(this.app, this.setPage, user, false)\r\n                        )\r\n                                    \r\n                    )\r\n                item.append(a)\r\n                allUsersDiv.appendChild(item)\r\n            }\r\n        });\r\n    }\r\n\r\n    private async syncFeed() {\r\n        const feedContainer = document.querySelector(\"#feed-list\")\r\n        if (!feedContainer) return;\r\n        feedContainer.replaceChildren()\r\n\r\n        // Fetch all users from the firebase\r\n        const allPosts: PostInfo[] = [];\r\n        const users: User[] = await fetchAllUsers();\r\n\r\n        // Loop through each user's posts and add them to the feed\r\n        users.forEach((user) => {\r\n            if (user) {\r\n                const username = user.username;\r\n                const profilePic = user.profilePic;\r\n\r\n                user.posts.forEach((post) => {\r\n                    const message = post.message;\r\n                    const timestamp = post.timestamp;\r\n                    allPosts.push({ username, profilePic, message, timestamp });\r\n                });\r\n            }\r\n        });\r\n        // Sort the posts by timestamp\r\n        allPosts.sort((a, b) =>\r\n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\r\n        );\r\n\r\n        // Create an element for each post and add it to the feed\r\n        allPosts.forEach((post) => {\r\n            generatePostGUI(post, post, feedContainer);\r\n        });\r\n    }\r\n}","/* \r\nAnledning till varför jag gjorde på detta sättet, är pga parcel gillade inte flera html filer när man kör npm run dev eller något liknade.\r\nSå jag gjorde om hela min kod till rent typescript som render html elementer som byter pages beroende vad .ts filen innehåller. \r\nVilket funkade bättre än att bråka med parcel när man hade flera entrypoints, det var väldigt buggy när man hade flera src/html/(filnamn) i package.json scripten.\r\nSå jag körde med att göra detta på en html fil istället. \r\nAnledning till varför det funkar ibland när man använder \"npm run dev\": https://github.com/parcel-bundler/parcel/pull/1119#issuecomment-1501818059\r\n*/\r\nimport { IPage, TPageSwitcher } from \"./IPage\";\r\nimport { User } from \"../modules/abstractClass\";\r\nimport { fetchAllUsers, registerUser } from \"../modules/restAPI\";\r\nimport { loginedUser } from \"../modules/abstractClass\";\r\nimport { checkLogin } from \"../modules/eventHandler\";\r\n\r\nimport BongoCat1 from \"../images/BongoCat.png\"\r\nimport BongoCat2 from \"../images/BongoCat1.png\"\r\nimport BongoCat3 from \"../images/BongoCat2.png\"\r\n\r\nconst IMAGE_LIST = [\r\n    BongoCat1,\r\n    BongoCat2,\r\n    BongoCat3\r\n]\r\n\r\n// This class represents the LoginPage of the app\r\nexport class LoginPage implements IPage {\r\n    private loginForm: HTMLFormElement\r\n    private registerForm: HTMLFormElement\r\n\r\n    // The constructor sets up the login and registration forms, and attaches event listeners\r\n    constructor(private app: Element, private setPage: TPageSwitcher) {\r\n        this.loginForm = this.renderLoginForm()\r\n        this.registerForm = this.renderRegisterForm()\r\n\r\n        // Add event listeners for form submissions\r\n        this.loginForm.addEventListener('submit', (e) => this.onLogin(e))\r\n        this.registerForm.addEventListener('submit', (e) => this.onRegister(e))\r\n    }\r\n\r\n    // This method is called when the page is rendered\r\n    render(): void {\r\n        // Clear the app element and set the title\r\n        this.app.replaceChildren();\r\n        document.title = 'Login Page';\r\n\r\n        // Append the login and registration forms\r\n        this.app.append(\r\n            this.loginForm,\r\n            this.registerForm\r\n        )\r\n        // If a user is already logged in, redirect to the dashboard\r\n        if (loginedUser()) this.setPage(\"dashboard\")\r\n    }\r\n\r\n    // This method handles the login form submission\r\n    private async onLogin(e: SubmitEvent) {\r\n        e.preventDefault()\r\n        const inputUsername: string = (document.querySelector(\"#login-username\") as HTMLInputElement).value;\r\n        const inputPassword: string = (document.querySelector(\"#login-password\") as HTMLInputElement).value;\r\n\r\n        const users = await fetchAllUsers();\r\n        const checkStatus = checkLogin(inputUsername, inputPassword, users);\r\n\r\n        if (!checkStatus) {\r\n            alert(\"Couldn't find your username or password, make sure you have a valid username and password\");\r\n        } else {\r\n            this.setPage('dashboard')\r\n        }\r\n    }\r\n    \r\n    // This method handles the registration form submission\r\n    private async onRegister(e: SubmitEvent) {\r\n        e.preventDefault()\r\n        const username: string = (document.querySelector(\"#register-username\") as HTMLInputElement).value;\r\n        const password: string = (document.querySelector(\"#register-password\") as HTMLInputElement).value;\r\n        const profilePic: string = (document.querySelector('input[name=\"avatarPic\"]:checked') as HTMLInputElement).value;\r\n        const timestamp: string = new Date().toISOString();\r\n        const userObj = new User('', username, password, profilePic, [{ message: \"Hello world, first status message\", timestamp: timestamp }]);\r\n\r\n        // Fetch all users and check if the username is already taken\r\n        const users: User[] = await fetchAllUsers();\r\n        const isDuplicate = users.find(u => u.username === username);\r\n        if (!isDuplicate) {\r\n            registerUser(userObj);\r\n            alert(`Welcome! ${username} you are now registered`);\r\n        } else {\r\n            alert(\"Name already taken!\")\r\n        }\r\n\r\n    }\r\n\r\n    // Private method for rendering the login form\r\n    private renderLoginForm(): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        // TODO: Add CSS class for design later\r\n\r\n        const title = document.createElement('h2');\r\n        title.innerHTML = 'Login';\r\n\r\n        const inputUsername = document.createElement('input');\r\n        inputUsername.placeholder = 'Username';\r\n        inputUsername.id = 'login-username';\r\n\r\n        const inputPassword = document.createElement('input');\r\n        inputPassword.placeholder = 'Password';\r\n        inputPassword.id = 'login-password';\r\n        inputPassword.type = 'password';\r\n\r\n        const button = document.createElement('button');\r\n        button.innerHTML = 'Log in';\r\n\r\n        form.append(title, inputUsername, inputPassword, button);\r\n        return form\r\n    }\r\n\r\n    // Private method for rendering the register form\r\n    private renderRegisterForm(): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        // TODO: Add CSS class for design later\r\n\r\n        const title = document.createElement('h2');\r\n        title.innerHTML = 'Register user';\r\n\r\n        const inputUsername = document.createElement('input');\r\n        inputUsername.placeholder = 'Username';\r\n        inputUsername.id = 'register-username';\r\n\r\n        const inputPassword = document.createElement('input');\r\n        inputPassword.placeholder = 'Password';\r\n        inputPassword.id = 'register-password';\r\n        inputPassword.type = 'password';\r\n\r\n        const button = document.createElement('button');\r\n        button.innerHTML = 'Register';\r\n\r\n        const section = document.createElement('section');\r\n        const sectionTitle = document.createElement('h3');\r\n        sectionTitle.innerHTML = 'Choose avatars';\r\n        const imageContainer = document.createElement('div')\r\n\r\n        //Loops through and display images as input radio \r\n        for (let i = 0; i < IMAGE_LIST.length; i++) {\r\n            const url = IMAGE_LIST[i]\r\n            const label = document.createElement('label')\r\n            const inputRadio = document.createElement('input');\r\n            inputRadio.type = 'radio';\r\n            inputRadio.name = 'avatarPic';\r\n            inputRadio.value = `pic${i}`;\r\n            if (i === 0) {\r\n                inputRadio.checked = true;\r\n            }\r\n            const img = document.createElement('img');\r\n            img.src = url;\r\n            label.append(inputRadio, img);\r\n            imageContainer.append(label);\r\n        }\r\n\r\n        form.append(title, inputUsername, inputPassword, button, imageContainer);\r\n        return form\r\n    }\r\n}","import { DashboardPage } from \"./pages/Dashboard\";\r\nimport { IPage } from \"./pages/IPage\";\r\nimport { LoginPage } from \"./pages/LoginPage\";\r\n\r\nasync function main() {\r\n    const app = document.querySelector('#app');\r\n    if (!app) throw new Error(\"No app container found\");\r\n\r\n    const pages = new Map<string, IPage>();\r\n    let currentPage: IPage | undefined = undefined\r\n    function setPage(page: string | IPage) {\r\n        if (typeof page === \"string\")\r\n            currentPage = pages.get(page)\r\n        else if (typeof page === \"object\")\r\n            currentPage = page\r\n        else throw new Error(\"Not a valid page\")\r\n\r\n        if (currentPage) currentPage.render()\r\n    }\r\n\r\n    const login = new LoginPage(app, setPage)\r\n    const dashboard = new DashboardPage(app, setPage)\r\n    pages.set('login', login)\r\n    pages.set('dashboard', dashboard)\r\n    setPage('login')\r\n}\r\n\r\nwindow.onload = main\r\n\r\n\r\n\r\n// if (userLoggedIn) {\r\n//     location.assign(\"./html/feed.html\");\r\n// }\r\n\r\n// const registerUserForm: HTMLFormElement | null = document.querySelector(\"#register-form\");\r\n// if (registerUserForm) {\r\n//     registerUserForm.addEventListener(\"submit\", async (event) => {\r\n//         event.preventDefault();\r\n//         const username: string = (document.querySelector(\"#input-username-new\") as HTMLInputElement).value;\r\n//         const password: string = (document.querySelector(\"#input-password-new\") as HTMLInputElement).value;\r\n//         const profilePic: string = (document.querySelector('input[name=\"avatarPic\"]:checked') as HTMLInputElement).value;\r\n//         const timestamp: string = new Date().toLocaleString();\r\n//         const userObj = new User(username, password, profilePic, [{ message: \"Hello world, first status message\", timestamp: timestamp }]);\r\n\r\n//         const users: User[] = await fetchAllUsers();\r\n//         const index: number = users ? Object.keys(users).length : 0; // Use the length of the object keys to get the number of users\r\n\r\n//         registerUser(userObj, index);\r\n\r\n//         alert(`Welcome! ${username} you are now registered`);\r\n//     });\r\n// }\r\n\r\n// const loginForm: HTMLFormElement | null = document.querySelector(\"#login-form\");\r\n// if (loginForm) {\r\n//     loginForm.addEventListener(\"submit\", async (event) => {\r\n//         event.preventDefault();\r\n//         const inputUsername: string = (document.querySelector(\"#input-username\") as HTMLInputElement).value;\r\n//         const inputPassword: string = (document.querySelector(\"#input-password\") as HTMLInputElement).value;\r\n\r\n//         const users: User[] = await fetchAllUsers();\r\n//         const checkStatus = checkLogin(inputUsername, inputPassword, users);\r\n\r\n//         if (!checkStatus) {\r\n//             alert(\"Couldn't find your username or password, make sure you have a valid username and password\");\r\n//         }\r\n//     });\r\n// }\r\n\r\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$417328c01b331d09$export$1f44aaf2ec115b54","constructor","userID","username","password","profilePic","posts","$417328c01b331d09$export$d4094e405f097382","localStorage","getItem","$8b29fe3df67b238f$var$baseURL","async","$8b29fe3df67b238f$export$beac2bb3153ee93d","url","reponse","fetch","data","json","users","key","value","entries","incomingUser","push","$8b29fe3df67b238f$export$16015adca85344a","obj","init","method","body","stringify","headers","then","res","user","name","$8b29fe3df67b238f$export$7d0f10f273c0438a","$8b29fe3df67b238f$export$4ea5da9bf71391e2","postIndex","$392cf8d5f7ff96d4$export$ebb7813e3fb8f4f2","inputUsername","inputPassword","databaseUser","find","setItem","alert","error","$392cf8d5f7ff96d4$export$baf22e704f7e4cbc","removeItem","$8e1a1889d991b70a$exports","URL","resolve","toString","$aa91f8e9527f5828$exports","$8b6ba298143cb6cb$exports","$8dc011a5be31f147$var$profilePicMap","pic0","$parcel$interopDefault","pic1","pic2","default","$8dc011a5be31f147$export$2f8636e64c597dbd","post","fetchedData","appendTo","postElement","document","createElement","classList","add","userNameAndPic","userProfilePicElement","usernameElement","innerText","messageElement","message","timestampElement","date","Date","timestamp","toLocaleDateString","toLocaleTimeString","src","append","$07a0cec27ea5d3e9$export$120c0e7b1bef3ec7","app","setPage","isYourProfile","this","sectionHeader","renderHeader","sectionProfile","renderProfile","render","replaceChildren","title","syncPosts","onDashboard","onLogout","onDelete","h1Element","textContent","appendChild","divNavInfo","buttonDashboard","addEventListener","buttonLogOut","buttonDeleteAccount","setAttribute","divConfirmDeletePopup","divPopupContent","pDeleteConfirmation","divPopupButtons","buttonConfirmDelete","deleteMyProfile","buttonCancelDelete","divUserInfo","sectionProfileContainer","divProfilePosts","formNewPost","inputNewPost","buttonPublish","e","preventDefault","publishPost","divMyPosts","divUserCard","h3UserCard","myPosts","querySelector","reverse","forEach","postObject","toISOString","$1d6cb3aed3336b21$export$fedd53519a0e2bce","sectionFeed","renderFeed","syncFeed","syncAllUsers","sectionNavInfo","buttonProfile","onOpenMyProfile","sectionUserInfo","sectionFeedContainer","sectionAllUsers","h3AllUsers","userList","allUsersDiv","item","a","innerHTML","feedContainer","allPosts","sort","b","getTime","$ede88871a1a69940$var$IMAGE_LIST","$ede88871a1a69940$export$f14c0e3f98d164c0","loginForm","renderLoginForm","registerForm","renderRegisterForm","onLogin","onRegister","userObj","u","form","placeholder","type","button","imageContainer","label","inputRadio","checked","img","window","onload","pages","Map","currentPage","page","get","login","dashboard","set"],"version":3,"file":"index.44f7a624.js.map"}